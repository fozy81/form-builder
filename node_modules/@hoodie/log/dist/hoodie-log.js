(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Log = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = Log

Log.console = console

var log = require('../lib/log')
var debug = require('../lib/debug')
var info = require('../lib/info')
var warn = require('../lib/warn')
var error = require('../lib/error')

var parseOptions = require('../lib/utils/parse-options')

function Log (options) {
  var state = parseOptions(options)
  state.console = Log.console

  var api = log.bind(null, state)

  api.debug = debug.bind(null, state)
  api.info = info.bind(null, state)
  api.warn = warn.bind(null, state)
  api.error = error.bind(null, state)
  api.scoped = function (name) {
    return Log({
      prefix: state.prefix + ':' + name,
      level: state.level,
      styles: state.styles
    })
  }

  Object.defineProperty(api, 'level', {
    get: function () {
      return state.level
    },
    set: function (newValue) {
      if (['debug', 'error', 'info', 'warn'].indexOf(newValue) === -1) {
        throw new Error('Invalid value for log.level: ' + newValue)
      }
      state.level = newValue
    },
    enumerable: true
  })

  Object.defineProperty(api, 'prefix', {
    get: function () {
      return state.prefix
    },
    set: function (newValue) {
      throw new Error('log.prefix is read-only')
    },
    enumerable: true
  })

  return api
}

},{"../lib/debug":2,"../lib/error":3,"../lib/info":4,"../lib/log":5,"../lib/utils/parse-options":7,"../lib/warn":9}],2:[function(require,module,exports){
module.exports = debug

var logLevelIgnored = require('./utils/log-level-ignored')
var prepareLogArguments = require('./utils/prepare-log-arguments')

function debug (state) {
  if (logLevelIgnored(state, 'debug')) {
    return
  }
  var args = prepareLogArguments(state, 'debug', [].slice.call(arguments, 1))
  state.console.log.apply(state.console, args)
}

},{"./utils/log-level-ignored":6,"./utils/prepare-log-arguments":8}],3:[function(require,module,exports){
module.exports = error

var prepareLogArguments = require('./utils/prepare-log-arguments')

function error (state) {
  var args = prepareLogArguments(state, 'error', [].slice.call(arguments, 1))
  state.console.error.apply(state.console, args)
}

},{"./utils/prepare-log-arguments":8}],4:[function(require,module,exports){
module.exports = info

var logLevelIgnored = require('./utils/log-level-ignored')
var prepareLogArguments = require('./utils/prepare-log-arguments')

function info (state) {
  if (logLevelIgnored(state, 'info')) {
    return
  }
  var args = prepareLogArguments(state, 'info', [].slice.call(arguments, 1))
  state.console.info.apply(state.console, args)
}

},{"./utils/log-level-ignored":6,"./utils/prepare-log-arguments":8}],5:[function(require,module,exports){
module.exports = log

var prepareLogArguments = require('./utils/prepare-log-arguments')

function log (state) {
  var args = prepareLogArguments(state, 'log', [].slice.call(arguments, 1))
  state.console.log.apply(state.console, args)
}

},{"./utils/prepare-log-arguments":8}],6:[function(require,module,exports){
module.exports = logLevelIgnored

function logLevelIgnored (state, target) {
  return LEVELS[target] < LEVELS[state.level]
}

var LEVELS = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3
}

},{}],7:[function(require,module,exports){
module.exports = parseOptions

parseOptions.browserSupportsLogStyles = require('browser-supports-log-styles')

var DEFAULT_LEVEL = 'warn'
var DEFAULT_STYLES = {
  default: 'color: white; padding: .2em .4em; border-radius: 1em',
  debug: 'background: green',
  log: 'background: gray',
  info: 'background: blue',
  warn: 'background: orange',
  error: 'background: red',
  reset: 'background: inherit; color: inherit'
}

function parseOptions (options) {
  if (typeof options === 'string') {
    options = {
      prefix: options
    }
  }

  if (!options || !options.prefix) {
    throw new TypeError('"prefix" required for new Log(options)')
  }

  if (options.styles === false) {
    options.styles = false
  }

  if (typeof options.styles === 'undefined') {
    options.styles = parseOptions.browserSupportsLogStyles()
  }

  if (options.styles === true) {
    options.styles = {
      default: DEFAULT_STYLES.default,
      log: DEFAULT_STYLES.log,
      debug: DEFAULT_STYLES.debug,
      info: DEFAULT_STYLES.info,
      warn: DEFAULT_STYLES.warn,
      error: DEFAULT_STYLES.error,
      reset: DEFAULT_STYLES.reset
    }
  }

  options.level = options.level || DEFAULT_LEVEL

  return options
}

},{"browser-supports-log-styles":10}],8:[function(require,module,exports){
module.exports = prepareLogArguments

function prepareLogArguments (state, type, args) {
  if (state.styles) {
    return ['%c' + state.prefix + '%c', state.styles.default + '; ' + state.styles[type], state.styles.reset].concat(args)
  }

  return ['(' + state.prefix + ':' + type + ')'].concat(args)
}

},{}],9:[function(require,module,exports){
module.exports = warn

var logLevelIgnored = require('./utils/log-level-ignored')
var prepareLogArguments = require('./utils/prepare-log-arguments')

function warn (state) {
  if (logLevelIgnored(state, 'warn')) {
    return
  }
  var args = prepareLogArguments(state, 'warn', [].slice.call(arguments, 1))
  state.console.warn.apply(state.console, args)
}

},{"./utils/log-level-ignored":6,"./utils/prepare-log-arguments":8}],10:[function(require,module,exports){
(function (process){
module.exports = browserSupportsLogStyles

function browserSupportsLogStyles () {
  // relevant for browsers only
  if (!process.browser) {
    return false
  }

  // http://stackoverflow.com/a/16459606/376773
  var isWebkit = 'WebkitAppearance' in document.documentElement.style
  // http://stackoverflow.com/a/398120/376773
  var isFirebug = window.console && (window.console.firebug || (window.console.exception && window.console.table)) && true
  // firefox >= v31? https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  var isFirefoxWithLogStyleSupport = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31

  return isWebkit || isFirebug || isFirefoxWithLogStyleSupport || false
}

}).call(this,require('_process'))
},{"_process":11}],11:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1])(1)
});